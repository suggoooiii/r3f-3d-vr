{"mappings":"uJAUA,SAASA,QAEPC,GAEA,MAAOC,EAAMC,GAAWC,EAAMC,WAW9B,OAVAC,GAAgB,KACd,GAAIL,EAAaM,QAAS,CACxB,MAAMC,EAAYC,EAAmBR,EAAaM,QAASJ,GAC3D,MAAO,KACLA,OAAQO,GACRF,QAIH,CAACP,IACGC","sources":["./packages/react/use-rect/src/useRect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { observeElementRect } from '@radix-ui/rect';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\nimport type { Measurable } from '@radix-ui/rect';\n\n/**\n * Use this custom hook to get access to an element's rect (getBoundingClientRect)\n * and observe it along time.\n */\nfunction useRect(\n  /** A reference to the element whose rect to observe */\n  refToObserve: React.RefObject<Measurable>\n) {\n  const [rect, setRect] = React.useState<ClientRect>();\n  useLayoutEffect(() => {\n    if (refToObserve.current) {\n      const unobserve = observeElementRect(refToObserve.current, setRect);\n      return () => {\n        setRect(undefined);\n        unobserve();\n      };\n    }\n    return;\n  }, [refToObserve]);\n  return rect;\n}\n\nexport { useRect };\n"],"names":["useRect","refToObserve","rect","setRect","React","useState","useLayoutEffect","current","unobserve","observeElementRect","undefined"],"version":3,"file":"index.module.js.map"}