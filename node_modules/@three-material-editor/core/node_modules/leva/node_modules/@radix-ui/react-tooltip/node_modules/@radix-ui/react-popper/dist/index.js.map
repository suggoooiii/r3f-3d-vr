{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/popper/src/Popper.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { getPlacementData } from '@radix-ui/popper';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useRect } from '@radix-ui/react-use-rect';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as ArrowPrimitive from '@radix-ui/react-arrow';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\nimport type { Side, Align } from '@radix-ui/popper';\nimport type { Measurable } from '@radix-ui/rect';\n\n/* -------------------------------------------------------------------------------------------------\n * Popper\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_NAME = 'Popper';\n\ntype PopperContextValue = {\n  arrowRef: React.RefObject<HTMLElement>;\n  onArrowOffsetChange: (offset?: number) => void;\n  arrowStyles: React.CSSProperties;\n};\n\nconst [PopperProvider, usePopperContext] = createContext<PopperContextValue>(POPPER_NAME);\n\ntype PopperOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  {\n    anchorRef: React.RefObject<Measurable>;\n    side?: Side;\n    sideOffset?: number;\n    align?: Align;\n    alignOffset?: number;\n    collisionTolerance?: number;\n    avoidCollisions?: boolean;\n  }\n>;\n\ntype PopperPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  PopperOwnProps\n>;\n\nconst Popper = React.forwardRef((props, forwardedRef) => {\n  const {\n    anchorRef,\n    side = 'bottom',\n    sideOffset,\n    align = 'center',\n    alignOffset,\n    collisionTolerance,\n    avoidCollisions = true,\n    ...popperProps\n  } = props;\n\n  const [arrowOffset, setArrowOffset] = React.useState<number>();\n  const anchorRect = useRect(anchorRef);\n  const popperRef = React.useRef<HTMLDivElement>(null);\n  const popperSize = useSize(popperRef);\n  const arrowRef = React.useRef<HTMLSpanElement>(null);\n  const arrowSize = useSize(arrowRef);\n\n  const composedPopperRef = useComposedRefs(forwardedRef, popperRef);\n\n  const windowSize = useWindowSize();\n  const collisionBoundariesRect = windowSize\n    ? DOMRect.fromRect({ ...windowSize, x: 0, y: 0 })\n    : undefined;\n\n  const { popperStyles, arrowStyles, placedSide, placedAlign } = getPlacementData({\n    anchorRect,\n    popperSize,\n    arrowSize,\n\n    // config\n    arrowOffset,\n    side,\n    sideOffset,\n    align,\n    alignOffset,\n    shouldAvoidCollisions: avoidCollisions,\n    collisionBoundariesRect,\n    collisionTolerance,\n  });\n  const isPlaced = placedSide !== undefined;\n\n  return (\n    <div style={popperStyles} data-radix-popper-wrapper=\"\">\n      <PopperProvider\n        arrowRef={arrowRef}\n        arrowStyles={arrowStyles}\n        onArrowOffsetChange={setArrowOffset}\n      >\n        <Primitive\n          data-side={placedSide}\n          data-align={placedAlign}\n          {...popperProps}\n          style={{\n            ...popperProps.style,\n            // if the Popper hasn't been placed yet (not all measurements done)\n            // we prevent animations so that users's animation don't kick in too early referring wrong sides\n            animation: !isPlaced ? 'none' : undefined,\n          }}\n          ref={composedPopperRef}\n        />\n      </PopperProvider>\n    </div>\n  );\n}) as PopperPrimitive;\n\nPopper.displayName = POPPER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'PopperArrow';\n\ntype PopperArrowOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof ArrowPrimitive.Root>,\n  { offset?: number }\n>;\n\ntype PopperArrowPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof ArrowPrimitive.Root>,\n  PopperArrowOwnProps\n>;\n\nconst PopperArrow = React.forwardRef(function PopperArrow(props, forwardedRef) {\n  const { offset, ...arrowProps } = props;\n  const context = usePopperContext(ARROW_NAME);\n  const { onArrowOffsetChange } = context;\n\n  // send the Arrow's offset up to Popper\n  React.useEffect(() => onArrowOffsetChange(offset), [onArrowOffsetChange, offset]);\n\n  return (\n    <span style={{ ...context.arrowStyles, pointerEvents: 'none' }}>\n      <span\n        // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)\n        // doesn't report size as we'd expect on SVG elements.\n        // it reports their bounding box which is effectively the largest path inside the SVG.\n        ref={context.arrowRef}\n        style={{\n          display: 'inline-block',\n          verticalAlign: 'top',\n          pointerEvents: 'auto',\n        }}\n      >\n        <ArrowPrimitive.Root\n          {...arrowProps}\n          ref={forwardedRef}\n          style={{\n            ...arrowProps.style,\n            // ensures the element can be measured correctly (mostly for if SVG)\n            display: 'block',\n          }}\n        />\n      </span>\n    </span>\n  );\n}) as PopperArrowPrimitive;\n\nPopperArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst WINDOW_RESIZE_DEBOUNCE_WAIT_IN_MS = 100;\n\nfunction useWindowSize() {\n  const [windowSize, setWindowSize] = React.useState<{ width: number; height: number } | undefined>(\n    undefined\n  );\n\n  React.useEffect(() => {\n    let debounceTimerId: number;\n\n    function updateWindowSize() {\n      setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    function handleResize() {\n      window.clearTimeout(debounceTimerId);\n      debounceTimerId = window.setTimeout(updateWindowSize, WINDOW_RESIZE_DEBOUNCE_WAIT_IN_MS);\n    }\n\n    updateWindowSize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowSize;\n}\n\nconst Root = Popper;\nconst Arrow = PopperArrow;\n\nexport {\n  Popper,\n  PopperArrow,\n  //\n  Root,\n  Arrow,\n};\n"],"names":["$parcel$exportWildcard","dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","createContext","PopperProvider","usePopperContext","Popper","React","forwardRef","props","forwardedRef","anchorRef","_props$side","side","sideOffset","_props$align","align","alignOffset","collisionTolerance","_props$avoidCollision","avoidCollisions","popperProps","$be5d7b5e9bdca855ae0500ff2a345d73$var$_objectWithoutProperties","_React$useState2","$be5d7b5e9bdca855ae0500ff2a345d73$var$_slicedToArray","useState","arrowOffset","setArrowOffset","anchorRect","useRect","popperRef","useRef","popperSize","useSize","arrowRef","arrowSize","composedPopperRef","useComposedRefs","windowSize","_React$useState4","undefined","setWindowSize","useEffect","debounceTimerId","updateWindowSize","width","window","innerWidth","height","innerHeight","handleResize","clearTimeout","setTimeout","addEventListener","removeEventListener","useWindowSize","collisionBoundariesRect","DOMRect","fromRect","$be5d7b5e9bdca855ae0500ff2a345d73$var$_objectSpread","x","y","_getPlacementData","getPlacementData","shouldAvoidCollisions","popperStyles","arrowStyles","placedSide","placedAlign","isPlaced","_react","createElement","style","data-radix-popper-wrapper","$be5d7b5e9bdca855ae0500ff2a345d73$var$PopperProvider","onArrowOffsetChange","Primitive","$be5d7b5e9bdca855ae0500ff2a345d73$var$_extends","data-side","data-align","animation","ref","displayName","PopperArrow","offset","arrowProps","context","pointerEvents","display","verticalAlign","_radixUiReactArrow","Root","Arrow"],"version":3,"file":"index.js.map"}