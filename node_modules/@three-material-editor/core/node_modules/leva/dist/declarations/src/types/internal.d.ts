import type { UseStore } from 'zustand';
import type { SpecialInput, RenderFn, FolderSettings, Plugin } from './public';
export declare type State = {
    data: Data;
};
export declare type StoreType = {
    useStore: UseStore<State>;
    orderPaths: (paths: string[]) => string[];
    setOrderedPaths: (newPaths: string[]) => void;
    disposePaths: (paths: string[]) => void;
    dispose: () => void;
    getVisiblePaths: () => string[];
    getFolderSettings: (path: string) => FolderSettings;
    getData: () => Data;
    addData: (newData: Data, override: boolean) => void;
    setValueAtPath: (path: string, value: any) => void;
    setSettingsAtPath: (path: string, settings: any) => void;
    disableInputAtPath: (path: string, flag: boolean) => void;
    set: (values: Record<string, any>) => void;
    get: (path: string) => any;
    getDataFromSchema: (schema: any) => [Data, Record<string, string>];
};
declare type Decorators = {
    __refCount: number;
    key: string;
    label: string;
    hint?: string;
    render?: RenderFn;
};
export declare type DataInput = {
    type: string;
    value: unknown;
    optional: boolean;
    disabled: boolean;
    settings?: object;
} & Decorators;
export declare type DataItem = DataInput | (SpecialInput & Decorators);
export declare type Data = Record<string, DataItem>;
export declare type Tree = {
    [key: string]: {
        __levaInput: true;
        path: string;
    } | Tree;
};
/**
 * Internal plugin type including schema.
 * @internal
 */
export interface InternalPlugin<Input, Value = Input, Settings = {}, InternalSettings = {}> extends Plugin<Input, Value, InternalSettings> {
    schema: (value: any, settings?: Settings) => boolean;
}
export declare type PanelSettingsType = {
    hideCopyButton: boolean;
};
export {};
