{"mappings":"IAYgCA,EAAMC,mHAAND,KAAMC,mBACpCC,OAAOC,KAAKF,GAAQG,SAAQ,SAASC,GACvB,YAARA,GAA6B,eAARA,GAIzBH,OAAOI,eAAeN,EAAMK,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,SAKbL,09BChBT,SAEES,GACA,IAAAC,EAAAC,EACwBC,EAAMC,WAD9B,GACOC,EADPJ,EAAA,GACaK,EADbL,EAAA,GAYA,OAVAM,GAAgB,WACd,GAAIP,EAAaQ,QAAS,CACxB,IAAMC,EAAYC,EAAmBV,EAAaQ,QAASF,GAC3D,OAAO,WACLA,OAAQK,GACRF,QAIH,CAACT,IACGK","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/use-rect/src/useRect.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { observeElementRect } from '@radix-ui/rect';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\nimport type { Measurable } from '@radix-ui/rect';\n\n/**\n * Use this custom hook to get access to an element's rect (getBoundingClientRect)\n * and observe it along time.\n */\nfunction useRect(\n  /** A reference to the element whose rect to observe */\n  refToObserve: React.RefObject<Measurable>\n) {\n  const [rect, setRect] = React.useState<ClientRect>();\n  useLayoutEffect(() => {\n    if (refToObserve.current) {\n      const unobserve = observeElementRect(refToObserve.current, setRect);\n      return () => {\n        setRect(undefined);\n        unobserve();\n      };\n    }\n    return;\n  }, [refToObserve]);\n  return rect;\n}\n\nexport { useRect };\n"],"names":["dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","refToObserve","_React$useState2","$acd0d0ff01e379496c3879a521b5f0f2$var$_slicedToArray","React","useState","rect","setRect","useLayoutEffect","current","unobserve","observeElementRect","undefined"],"version":3,"file":"index.js.map"}