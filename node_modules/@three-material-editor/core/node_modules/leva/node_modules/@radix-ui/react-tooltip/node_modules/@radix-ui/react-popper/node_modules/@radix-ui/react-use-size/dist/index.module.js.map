{"mappings":"+BAIA,SAASA,QAEPC,GAEA,MAAOC,EAAMC,GAAWC,EAAMC,cAAwDC,GA+CtF,OA7CAF,EAAMG,WAAU,KACd,GAAIN,EAAaO,QAAS,CACxB,MAAMC,EAAmBR,EAAaO,QAChCE,EAAiB,IAAIC,gBAAgBC,IACzC,IAAKC,MAAMC,QAAQF,GACjB,OAKF,IAAKA,EAAQG,OACX,OAGF,MAAMC,EAAQJ,EAAQ,GACtB,IAAIK,EACAC,EAEJ,GAAI,kBAAmBF,EAAO,CAC5B,MAAMG,EAAkBH,EAAK,cAEvBI,EAAaP,MAAMC,QAAQK,GAAmBA,EAAgB,GAAKA,EACzEF,EAAQG,EAAU,WAClBF,EAASE,EAAU,cACd,CAGL,MAAMC,EAAOZ,EAAiBa,wBAC9BL,EAAQI,EAAKJ,MACbC,EAASG,EAAKH,OAGhBf,EAAQ,CAAEc,MAAAA,EAAOC,OAAAA,OAKnB,OAFAR,EAAea,QAAQd,EAAkB,CAAEe,IAAK,eAEzC,KACLrB,OAAQG,GACRI,EAAee,UAAUhB,OAI5B,CAACR,IAEGC","sources":["./packages/react/use-size/src/useSize.tsx"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\n\nfunction useSize(\n  /** A reference to the element whose size to observe */\n  refToObserve: React.RefObject<HTMLElement | SVGElement>\n) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (refToObserve.current) {\n      const elementToObserve = refToObserve.current;\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate a rect ourselves to get the correct border box.\n          const rect = elementToObserve.getBoundingClientRect();\n          width = rect.width;\n          height = rect.height;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(elementToObserve, { box: 'border-box' });\n\n      return () => {\n        setSize(undefined);\n        resizeObserver.unobserve(elementToObserve);\n      };\n    }\n    return;\n  }, [refToObserve]);\n\n  return size;\n}\n\nexport { useSize };\n"],"names":["useSize","refToObserve","size","setSize","React","useState","undefined","useEffect","current","elementToObserve","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","width","height","borderSizeEntry","borderSize","rect","getBoundingClientRect","observe","box","unobserve"],"version":3,"file":"index.module.js.map"}