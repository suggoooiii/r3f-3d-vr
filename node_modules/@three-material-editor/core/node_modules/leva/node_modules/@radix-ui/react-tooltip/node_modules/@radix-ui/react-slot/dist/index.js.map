{"mappings":"IAYgCA,EAAMC,iHAAND,KAAMC,mBACpCC,OAAOC,KAAKF,GAAQG,SAAQ,SAASC,GACvB,YAARA,GAA6B,eAARA,GAIzBH,OAAOI,eAAeN,EAAMK,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,SAKbL,6vCChBT,IAAMS,EAAOC,EAAMC,YAA6B,SAACC,EAAOC,GAAiB,IAC/DC,EAA2BF,EAA3BE,SAAaC,EADkDC,EACpCJ,EADoC,CAAA,aAIvE,OAAoB,IAFAF,EAAMO,SAASC,MAAMJ,GAIrCK,EAAAC,cAACC,EAADC,EAAA,GAAeP,EAAf,CAA0BQ,IAAKV,IAC5BC,GAMLK,EAAAC,cAAAD,EAAAK,SAAA,KACGd,EAAMO,SAASQ,IAAIX,GAAU,SAACY,GAC7B,OAAIhB,EAAMiB,eAAeD,IAAUA,EAAME,OAASC,EAE9CV,EAAAC,cAACC,EAADC,EAAA,GAAeP,EAAf,CAA0BQ,IAAKV,IAC5Ba,EAAMd,MAAME,UAKZY,wBAMfjB,EAAKqB,YAAc,OAQnB,IAAMC,EAAYrB,EAAMC,YAAgC,SAACC,EAAOC,GAAiB,IACvEC,EAA2BF,EAA3BE,SAAaC,EAD0DC,EAC5CJ,EAD4C,CAAA,aAEzEc,EAAQhB,EAAMO,SAASe,KAAKlB,GAElC,OAAOJ,EAAMiB,eAAeD,GACxBhB,EAAMuB,aAAaP,EAAnBQ,EAAAA,EAAA,GAqBN,SAAoBnB,EAAqBoB,GAEvC,IAAMC,EAAaF,EAAA,GAAQC,GAG3B,IAAK,IAAME,KAAYF,EAAY,CACjC,IAAMG,EAAgBvB,EAAUsB,GAC1BE,EAAiBJ,EAAWE,GAChB,WAAWG,KAAKH,KAGhCD,EAAcC,GAAYI,EAAqBF,EAAgBD,IAInE,OAAAJ,EAAAA,EAAA,GAAYnB,GAAcqB,GAnCjBM,CAAW3B,EAAWW,EAAMd,QADjC,GAAA,CAEEW,IAAKoB,EAAY9B,EAAea,EAAcH,QAEhD,QAGNQ,EAAUD,YAAc,YAMxB,IAAMD,EAAY,SAAAe,GAChB,OADiEA,EAA9C9B,8BA0BrB,IAAM+B,EAAOpC","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/slot/src/Slot.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ntype SlotProps = { children: React.ReactNode };\n\nconst Slot = React.forwardRef<never, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const childLength = React.Children.count(children);\n\n  if (childLength === 1) {\n    return (\n      <SlotClone {...slotProps} ref={forwardedRef}>\n        {children}\n      </SlotClone>\n    );\n  }\n\n  return (\n    <>\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === Slottable) {\n          return (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          );\n        }\n\n        return child;\n      })}\n    </>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ntype SlotCloneProps = { children: React.ReactNode };\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const child = React.Children.only(children);\n\n  return React.isValidElement(child)\n    ? React.cloneElement(child, {\n        ...mergeProps(slotProps, child.props),\n        ref: composeRefs(forwardedRef, (child as any).ref),\n      })\n    : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return children as React.ReactElement;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  // if it's a handler, modify the override by composing the base handler\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n\n    if (isHandler) {\n      overrideProps[propName] = composeEventHandlers(childPropValue, slotPropValue);\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\n"],"names":["dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","Slot","React","forwardRef","props","forwardedRef","children","slotProps","$bd3c7a2329cce5affa12c89d44fd473$var$_objectWithoutProperties","Children","count","_react","createElement","$bd3c7a2329cce5affa12c89d44fd473$var$SlotClone","$bd3c7a2329cce5affa12c89d44fd473$var$_extends","ref","Fragment","map","child","isValidElement","type","Slottable","displayName","SlotClone","only","cloneElement","$bd3c7a2329cce5affa12c89d44fd473$var$_objectSpread","childProps","overrideProps","propName","slotPropValue","childPropValue","test","composeEventHandlers","mergeProps","composeRefs","_ref","Root"],"version":3,"file":"index.js.map"}