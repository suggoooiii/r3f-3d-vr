{"mappings":"IAYgCA,EAAMC,KAAND,KAAMC,mBACpCC,OAAOC,KAAKF,GAAQG,SAAQ,SAASC,GACvB,YAARA,GAA6B,eAARA,GAIzBH,OAAOI,eAAeN,EAAMK,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,SAKbL,09BCtBT,SAEES,GACA,IAAAC,EAAAC,EACwBC,EAAMC,cAAwDC,GADtF,GACOC,EADPL,EAAA,GACaM,EADbN,EAAA,GAgDA,OA7CAE,EAAMK,WAAU,WACd,GAAIR,EAAaS,QAAS,CACxB,IAAMC,EAAmBV,EAAaS,QAChCE,EAAiB,IAAIC,gBAAe,SAACC,GACzC,GAAKC,MAAMC,QAAQF,IAMdA,EAAQG,OAAb,CAIA,IACIC,EACAC,EAFEC,EAAQN,EAAQ,GAItB,GAAI,kBAAmBM,EAAO,CAC5B,IAAMC,EAAkBD,EAAK,cAEvBE,EAAaP,MAAMC,QAAQK,GAAmBA,EAAgB,GAAKA,EACzEH,EAAQI,EAAU,WAClBH,EAASG,EAAU,cACd,CAGL,IAAMC,EAAOZ,EAAiBa,wBAC9BN,EAAQK,EAAKL,MACbC,EAASI,EAAKJ,OAGhBX,EAAQ,CAAEU,MAAAA,EAAOC,OAAAA,QAKnB,OAFAP,EAAea,QAAQd,EAAkB,CAAEe,IAAK,eAEzC,WACLlB,OAAQF,GACRM,EAAee,UAAUhB,OAI5B,CAACV,IAEGM","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/use-size/src/useSize.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\n\nfunction useSize(\n  /** A reference to the element whose size to observe */\n  refToObserve: React.RefObject<HTMLElement | SVGElement>\n) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (refToObserve.current) {\n      const elementToObserve = refToObserve.current;\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate a rect ourselves to get the correct border box.\n          const rect = elementToObserve.getBoundingClientRect();\n          width = rect.width;\n          height = rect.height;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(elementToObserve, { box: 'border-box' });\n\n      return () => {\n        setSize(undefined);\n        resizeObserver.unobserve(elementToObserve);\n      };\n    }\n    return;\n  }, [refToObserve]);\n\n  return size;\n}\n\nexport { useSize };\n"],"names":["dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","refToObserve","_React$useState2","$c5ae653b7eb72448aad854b386122f$var$_slicedToArray","React","useState","undefined","size","setSize","useEffect","current","elementToObserve","resizeObserver","ResizeObserver","entries","Array","isArray","length","width","height","entry","borderSizeEntry","borderSize","rect","getBoundingClientRect","observe","box","unobserve"],"version":3,"file":"index.js.map"}