{"mappings":"IAYgCA,EAAMC,KAAND,KAAMC,mBACpCC,OAAOC,KAAKF,GAAQG,SAAQ,SAASC,GACvB,YAARA,GAA6B,eAARA,GAIzBH,OAAOI,eAAeN,EAAMK,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,SAKbL,6YCxBT,SAAwDS,GACtD,IAAMC,EAAUC,EAAMC,cAAgC,MAEtD,SAASC,EAASC,GAAyD,IACjEC,EAA+BD,EAA/BC,SAAaC,EADoDC,EAClCH,EADkC,CAAA,aAGnEI,EAAQP,EAAMQ,SAClB,WAAA,OAAMH,IAENd,OAAOkB,OAAOJ,IAEhB,OAAOK,EAAAC,cAACZ,EAAQG,SAAT,CAAkBK,MAAOA,GAAQH,GAY1C,OADAF,EAASU,YAAcd,EAAoB,WACpC,CAACI,EATR,SAAoBW,GAClB,IAAMC,EAAUd,EAAMe,WAAWhB,GACjC,GAAgB,OAAZe,EACF,MAAM,IAAIE,MAAJ,IAAAC,OAAeJ,EAAf,2BAAAI,OAAuDnB,EAAvD,MAER,OAAOgB","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/context/src/createContext.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\n\nfunction createContext<ContextValueType extends object>(rootComponentName: string) {\n  const Context = React.createContext<ContextValueType>(null as any);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...providerProps } = props;\n    // Only re-memoize when prop values change\n    const value = React.useMemo(\n      () => providerProps,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Object.values(providerProps)\n    ) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context === null) {\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n"],"names":["dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","rootComponentName","Context","React","createContext","Provider","props","children","providerProps","$cb38b09ca2014fbe886988499992719$var$_objectWithoutProperties","value","useMemo","values","_react","createElement","displayName","consumerName","context","useContext","Error","concat"],"version":3,"file":"index.js.map"}