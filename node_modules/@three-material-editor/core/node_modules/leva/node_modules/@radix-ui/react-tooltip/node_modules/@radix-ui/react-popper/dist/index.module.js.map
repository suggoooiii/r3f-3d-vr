{"mappings":"slBAiBA,MAQOA,EAAgBC,GAAoBC,EARvB,iBA4BpB,MAAMC,OAASC,EAAMC,YAAW,CAACC,EAAOC,KACtC,MAAMC,UACJA,EADIC,KAEJA,EAAO,SAFHC,WAGJA,EAHIC,MAIJA,EAAQ,SAJJC,YAKJA,EALIC,mBAMJA,EANIC,gBAOJA,GAAkB,KACfC,GACDT,GAEGU,EAAaC,GAAkBb,EAAMc,WACtCC,EAAaC,EAAQZ,GACrBa,EAAYjB,EAAMkB,OAAuB,MACzCC,EAAaC,EAAQH,GACrBI,EAAWrB,EAAMkB,OAAwB,MACzCI,EAAYF,EAAQC,GAEpBE,EAAoBC,EAAgBrB,EAAcc,GAElDQ,EAyGR,WACE,MAAOA,EAAYC,GAAiB1B,EAAMc,cACxCa,GAoBF,OAjBA3B,EAAM4B,WAAU,KACd,IAAIC,EAEJ,SAASC,IACPJ,EAAc,CAAEK,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,cAG3D,SAASC,IACPJ,OAAOK,aAAaR,GACpBA,EAAkBG,OAAOM,WAAWR,EAhBA,KAqBtC,OAFAA,IACAE,OAAOO,iBAAiB,SAAUH,GAC3B,IAAMJ,OAAOQ,oBAAoB,SAAUJ,KACjD,IAEIX,EA/HYgB,GACbC,EAA0BjB,EAC5BkB,QAAQC,SAAS,IAAKnB,EAAYoB,EAAG,EAAGC,EAAG,SAC3CnB,GAEEoB,aAAEA,EAAFC,YAAgBA,EAAhBC,WAA6BA,EAA7BC,YAAyCA,GAAgBC,EAAiB,CAC9EpC,WAAAA,EACAI,WAAAA,EACAG,UAAAA,EAGAV,YAAAA,EACAP,KAAAA,EACAC,WAAAA,EACAC,MAAAA,EACAC,YAAAA,EACA4C,sBAAuB1C,EACvBgC,wBAAAA,EACAjC,mBAAAA,IAEI4C,OAA0B1B,IAAfsB,EAEjB,OACEK,EAAAC,cAAA,MAAA,CAAKC,MAAOT,EAAcU,4BAA0B,IAClDH,EAAAC,cAACG,EAAD,CACErC,SAAUA,EACV2B,YAAaA,EACbW,oBAAqB9C,GAErByC,EAAAC,cAACK,EAADC,EAAA,CACEC,YAAWb,EACXc,aAAYb,GACRvC,EAHN,CAIE6C,MAAO,IACF7C,EAAY6C,MAGfQ,UAAYX,OAAoB1B,EAAT,QAEzBsC,IAAK1C,UAOfxB,OAAOmE,YA/Fa,gBAiHpB,MAAMC,YAAcnE,EAAMC,YAAW,SAAqBC,EAAOC,GAC/D,MAAMiE,OAAEA,KAAWC,GAAenE,EAC5BoE,EAAUzE,EAdC,gBAeX8D,oBAAEA,GAAwBW,EAKhC,OAFAtE,EAAM4B,WAAU,IAAM+B,EAAoBS,IAAS,CAACT,EAAqBS,IAGvEd,EAAAC,cAAA,OAAA,CAAMC,MAAO,IAAKc,EAAQtB,YAAauB,cAAe,SACpDjB,EAAAC,cAAA,OAAA,CAIEU,IAAKK,EAAQjD,SACbmC,MAAO,CACLgB,QAAS,eACTC,cAAe,MACfF,cAAe,SAGjBjB,EAAAC,cAACmB,EAAeC,KAAhBd,EAAA,GACMQ,EADN,CAEEJ,IAAK9D,EACLqD,MAAO,IACFa,EAAWb,MAEdgB,QAAS,iBAQrBL,YAAYD,YA/CO,qBA8EnB,MAAMS,KAAO5E,cACb,MAAM6E,MAAQT","sources":["./packages/react/popper/src/Popper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getPlacementData } from '@radix-ui/popper';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useRect } from '@radix-ui/react-use-rect';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as ArrowPrimitive from '@radix-ui/react-arrow';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\nimport type { Side, Align } from '@radix-ui/popper';\nimport type { Measurable } from '@radix-ui/rect';\n\n/* -------------------------------------------------------------------------------------------------\n * Popper\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_NAME = 'Popper';\n\ntype PopperContextValue = {\n  arrowRef: React.RefObject<HTMLElement>;\n  onArrowOffsetChange: (offset?: number) => void;\n  arrowStyles: React.CSSProperties;\n};\n\nconst [PopperProvider, usePopperContext] = createContext<PopperContextValue>(POPPER_NAME);\n\ntype PopperOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  {\n    anchorRef: React.RefObject<Measurable>;\n    side?: Side;\n    sideOffset?: number;\n    align?: Align;\n    alignOffset?: number;\n    collisionTolerance?: number;\n    avoidCollisions?: boolean;\n  }\n>;\n\ntype PopperPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  PopperOwnProps\n>;\n\nconst Popper = React.forwardRef((props, forwardedRef) => {\n  const {\n    anchorRef,\n    side = 'bottom',\n    sideOffset,\n    align = 'center',\n    alignOffset,\n    collisionTolerance,\n    avoidCollisions = true,\n    ...popperProps\n  } = props;\n\n  const [arrowOffset, setArrowOffset] = React.useState<number>();\n  const anchorRect = useRect(anchorRef);\n  const popperRef = React.useRef<HTMLDivElement>(null);\n  const popperSize = useSize(popperRef);\n  const arrowRef = React.useRef<HTMLSpanElement>(null);\n  const arrowSize = useSize(arrowRef);\n\n  const composedPopperRef = useComposedRefs(forwardedRef, popperRef);\n\n  const windowSize = useWindowSize();\n  const collisionBoundariesRect = windowSize\n    ? DOMRect.fromRect({ ...windowSize, x: 0, y: 0 })\n    : undefined;\n\n  const { popperStyles, arrowStyles, placedSide, placedAlign } = getPlacementData({\n    anchorRect,\n    popperSize,\n    arrowSize,\n\n    // config\n    arrowOffset,\n    side,\n    sideOffset,\n    align,\n    alignOffset,\n    shouldAvoidCollisions: avoidCollisions,\n    collisionBoundariesRect,\n    collisionTolerance,\n  });\n  const isPlaced = placedSide !== undefined;\n\n  return (\n    <div style={popperStyles} data-radix-popper-wrapper=\"\">\n      <PopperProvider\n        arrowRef={arrowRef}\n        arrowStyles={arrowStyles}\n        onArrowOffsetChange={setArrowOffset}\n      >\n        <Primitive\n          data-side={placedSide}\n          data-align={placedAlign}\n          {...popperProps}\n          style={{\n            ...popperProps.style,\n            // if the Popper hasn't been placed yet (not all measurements done)\n            // we prevent animations so that users's animation don't kick in too early referring wrong sides\n            animation: !isPlaced ? 'none' : undefined,\n          }}\n          ref={composedPopperRef}\n        />\n      </PopperProvider>\n    </div>\n  );\n}) as PopperPrimitive;\n\nPopper.displayName = POPPER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'PopperArrow';\n\ntype PopperArrowOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof ArrowPrimitive.Root>,\n  { offset?: number }\n>;\n\ntype PopperArrowPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof ArrowPrimitive.Root>,\n  PopperArrowOwnProps\n>;\n\nconst PopperArrow = React.forwardRef(function PopperArrow(props, forwardedRef) {\n  const { offset, ...arrowProps } = props;\n  const context = usePopperContext(ARROW_NAME);\n  const { onArrowOffsetChange } = context;\n\n  // send the Arrow's offset up to Popper\n  React.useEffect(() => onArrowOffsetChange(offset), [onArrowOffsetChange, offset]);\n\n  return (\n    <span style={{ ...context.arrowStyles, pointerEvents: 'none' }}>\n      <span\n        // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)\n        // doesn't report size as we'd expect on SVG elements.\n        // it reports their bounding box which is effectively the largest path inside the SVG.\n        ref={context.arrowRef}\n        style={{\n          display: 'inline-block',\n          verticalAlign: 'top',\n          pointerEvents: 'auto',\n        }}\n      >\n        <ArrowPrimitive.Root\n          {...arrowProps}\n          ref={forwardedRef}\n          style={{\n            ...arrowProps.style,\n            // ensures the element can be measured correctly (mostly for if SVG)\n            display: 'block',\n          }}\n        />\n      </span>\n    </span>\n  );\n}) as PopperArrowPrimitive;\n\nPopperArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst WINDOW_RESIZE_DEBOUNCE_WAIT_IN_MS = 100;\n\nfunction useWindowSize() {\n  const [windowSize, setWindowSize] = React.useState<{ width: number; height: number } | undefined>(\n    undefined\n  );\n\n  React.useEffect(() => {\n    let debounceTimerId: number;\n\n    function updateWindowSize() {\n      setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    function handleResize() {\n      window.clearTimeout(debounceTimerId);\n      debounceTimerId = window.setTimeout(updateWindowSize, WINDOW_RESIZE_DEBOUNCE_WAIT_IN_MS);\n    }\n\n    updateWindowSize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowSize;\n}\n\nconst Root = Popper;\nconst Arrow = PopperArrow;\n\nexport {\n  Popper,\n  PopperArrow,\n  //\n  Root,\n  Arrow,\n};\n"],"names":["PopperProvider","usePopperContext","createContext","Popper","React","forwardRef","props","forwardedRef","anchorRef","side","sideOffset","align","alignOffset","collisionTolerance","avoidCollisions","popperProps","arrowOffset","setArrowOffset","useState","anchorRect","useRect","popperRef","useRef","popperSize","useSize","arrowRef","arrowSize","composedPopperRef","useComposedRefs","windowSize","setWindowSize","undefined","useEffect","debounceTimerId","updateWindowSize","width","window","innerWidth","height","innerHeight","handleResize","clearTimeout","setTimeout","addEventListener","removeEventListener","useWindowSize","collisionBoundariesRect","DOMRect","fromRect","x","y","popperStyles","arrowStyles","placedSide","placedAlign","getPlacementData","shouldAvoidCollisions","isPlaced","_react","createElement","style","data-radix-popper-wrapper","$d4fb2a15a6483a4f85af0f96fd68687d$var$PopperProvider","onArrowOffsetChange","Primitive","$d4fb2a15a6483a4f85af0f96fd68687d$var$_extends","data-side","data-align","animation","ref","displayName","PopperArrow","offset","arrowProps","context","pointerEvents","display","verticalAlign","_radixUiReactArrow","Root","Arrow"],"version":3,"file":"index.module.js.map"}