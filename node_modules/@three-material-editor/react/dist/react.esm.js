import React, { forwardRef, useState, useRef, useEffect, useCallback } from 'react';
import { useThree, useFrame } from 'react-three-fiber';
import { materialsToProgram, editorContext, editorState, EditorDom } from '@three-material-editor/core';
import { unmountComponentAtNode, render } from 'react-dom';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var Html = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _portal$current;

  var children = _ref.children,
      className = _ref.className,
      portal = _ref.portal,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "style", "className", "portal"]);

  // const { gl } = useThree();
  var _useState = useState(function () {
    return document.createElement('div');
  }),
      el = _useState[0];

  var group = useRef(null);
  var target = (_portal$current = portal == null ? void 0 : portal.current) != null ? _portal$current : document.body;
  useEffect(function () {
    if (group.current) {
      if (target) {
        target.appendChild(el);
      }

      return function () {
        if (target) target.removeChild(el);
        unmountComponentAtNode(el);
      };
    }

    return undefined;
  }, [target, el]);
  useEffect(function () {
    return void render( /*#__PURE__*/React.createElement("div", {
      ref: ref,
      className: className,
      children: children
    }), el);
  });
  return /*#__PURE__*/React.createElement("group", Object.assign({}, props, {
    ref: group
  }));
});

var optionsDefault = {
  overrideRaf: false,
  fullScreen: true
};
var Logic = function Logic() {
  return null;
};
var MaterialEditor = function MaterialEditor(_options) {};
var useEditorComposer = function useEditorComposer() {};

if (process.env.NODE_ENV === 'production' && process.env.TME_PROD !== 'SHOW') ; else {
  Logic = function Logic() {
    var _useThree = useThree(),
        scene = _useThree.scene,
        gl = _useThree.gl;

    useFrame(function () {
      materialsToProgram(scene, gl);
    });
    return null;
  };

  useEditorComposer = function useEditorComposer() {
    var onRefChange = useCallback(function (node) {
      if (node === null) {
        editorContext.composer = null;
      } else {
        editorContext.composer = node;
      }
    }, []);
    return onRefChange;
  };

  MaterialEditor = function MaterialEditor(_options) {
    var options = Object.assign(optionsDefault, _options);
    Object.assign(editorState, options);
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Logic, null), /*#__PURE__*/React.createElement(Html, null, /*#__PURE__*/React.createElement(EditorDom, {
      className: editorState.className
    })));
  };
}

export { Logic, MaterialEditor, useEditorComposer };
//# sourceMappingURL=react.esm.js.map
