import * as React from "react";
import { Primitive } from "@radix-ui/react-primitive";
import * as PopperPrimitive from "@radix-ui/react-popper";
import * as Polymorphic from "@radix-ui/react-polymorphic";
type TooltipOwnProps = {
    open?: boolean;
    defaultOpen?: boolean;
    onOpenChange?: (open: boolean) => void;
};
export const Tooltip: React.FC<TooltipOwnProps>;
declare const TRIGGER_DEFAULT_TAG = "button";
type TooltipTriggerOwnProps = Polymorphic.OwnProps<typeof Primitive>;
type TooltipTriggerPrimitive = Polymorphic.ForwardRefComponent<typeof TRIGGER_DEFAULT_TAG, TooltipTriggerOwnProps>;
export const TooltipTrigger: TooltipTriggerPrimitive;
type TooltipContentOwnProps = Polymorphic.OwnProps<typeof TooltipContentImpl>;
type TooltipContentPrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof TooltipContentImpl>, TooltipContentOwnProps>;
export const TooltipContent: TooltipContentPrimitive;
type PopperPrimitiveOwnProps = Polymorphic.OwnProps<typeof PopperPrimitive.Root>;
type TooltipContentImplOwnProps = Polymorphic.Merge<PopperPrimitiveOwnProps, {
    /**
     * A more descriptive label for accessibility purpose
     */
    'aria-label'?: string;
    anchorRef?: PopperPrimitiveOwnProps['anchorRef'];
    /**
     * Whether the Tooltip should render in a Portal
     * (default: `true`)
     */
    portalled?: boolean;
}>;
type TooltipContentImplPrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof PopperPrimitive.Root>, TooltipContentImplOwnProps>;
declare const TooltipContentImpl: TooltipContentImplPrimitive;
export const TooltipArrow: Polymorphic.ForwardRefComponent<"svg", Polymorphic.Merge<{}, {
    offset?: number | undefined;
}>>;
export const Root: React.FC<TooltipOwnProps>;
export const Trigger: TooltipTriggerPrimitive;
export const Content: TooltipContentPrimitive;
export const Arrow: Polymorphic.ForwardRefComponent<"svg", Polymorphic.Merge<{}, {
    offset?: number | undefined;
}>>;

//# sourceMappingURL=index.d.ts.map
